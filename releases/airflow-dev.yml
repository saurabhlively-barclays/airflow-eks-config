apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: airflow
  namespace: dev
spec:
  interval: 30s
  releaseName: airflow-dev
  chart:
    spec:
      chart: airflow
      version: "1.7.0"
      sourceRef:
        kind: HelmRepository
        name: apache-airflow
        namespace: flux-system
  values:
    defaultAirflowTag: "2.5.1"
    airflowVersion: "2.5.1"
    fernetKey: "zTxhk7FuGqQVPZVoukLn5bGWOrgHzhQnBnaqAItcZGI="
    env:
      - name: "AIRFLOW__CORE__LOAD_EXAMPLES"
        value: "False"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__NAMESPACE"
        value: "dev"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_REPOSITORY"
        value: "apache/airflow"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_TAG"
        value: "slim-2.5.1-python3.8"
    executor: "KubernetesExecutor"
    createUserJob:
      useHelmHooks: false
    migrateDatabaseJob:
      useHelmHooks: false
    dags:
      persistence:
          enabled: False
      gitSync:
          enabled: True
          repo: git@github.com:saurabhlively-barclays/airflow-private-dags.git
          branch: master
          maxFailures: 0
          subPath: ""
          wait: 60
          sshKeySecret: airflow-ssh-secret
    extraSecrets:
        airflow-ssh-secret:
            data: |
              gitSshKey: 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUNGd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFnRUF2d2p0T2h5YlE4bXFoVkFtWnA2T0pMVzl5aVljSmIxTkx5c1dnQWI5MlA4bjU1am5rNGUwCnNIQ3VMbzlDbGlmMnVna1hCTkZrRGZTdkhaVHU1RG1JaHdQVi85SXJoWC9vbjlpeWI5TjFNc1JFTjJwU2FNZy9ac2hJNCsKRnY0VDVYQzRlOUZRZ3E5WTdJQm5FcGFaRzMra05ZZUdIN0hRRm1lTVRwaWIzdkFKUWphRThDOGxma2JJdk9vNCtycTFQMQpUd29ZZkJNdDV2ZVU1VEFNempoNUhpS2dyUlhzYVpwa3ZmeVNDbkJ4elZ0d2VvLzFZZXc2OERvYUVuVWVZZDBiT0ZULzNCCjNadGErQTduczB4bG0vUC9Cd2Fxd3l1RjBBM1kvVlhXQVhXc2tzdm5acXVUVWtIa0x0OUJKNGhUdkhmUEdCOEd2c29CcWMKOUtKMW92TWdtZ0IveHhyeCtGVUQrbDZGMUFjL2duSjBrUFpSTmIwYW1pT3pvR01vNW5PRlVvclpqMHBnU0lUd3l3QzFJVQpYUlJ6UE83TjdtRjlKb2hya29CNnJKeDViVHg5S21Udjh0bHE0R0NBVmRZamNTK2kwb1JNdEtEdkFKVUFFQm1JYjZ4RWJFCm9mTkhHbHBKcEkyYytwdEp0YmFVNVQ2K0FVY0lZQ0FyRVhta1J3aURiM3Q1UCtMUWpHS3hOUGJCTWtjRXgyZHFlUU9mTk8KeUpGcE9ScjhzQkY4SE0vdnpyZ0JqNkNQS0RwM1ZiQThRTTlYM2ZYWm1mdGNjdk5HQXlPeEZHM1ExQVMzemxNYUhuTW9JcgpwckQxU3l4T2ozOFNpUWpZR21TbEREVVZxU2o3blZ3cHdFRVBoZ25QaENMRml3aFJRcGpzVXlDT0hJdlpSRi80Sy9laVh3Ck1BQUFkd2hvWm95NGFHYU1zQUFBQUhjM05vTFhKellRQUFBZ0VBdndqdE9oeWJROG1xaFZBbVpwNk9KTFc5eWlZY0piMU4KTHlzV2dBYjkyUDhuNTVqbms0ZTBzSEN1TG85Q2xpZjJ1Z2tYQk5Ga0RmU3ZIWlR1NURtSWh3UFYvOUlyaFgvb245aXliOQpOMU1zUkVOMnBTYU1nL1pzaEk0K0Z2NFQ1WEM0ZTlGUWdxOVk3SUJuRXBhWkczK2tOWWVHSDdIUUZtZU1UcGliM3ZBSlFqCmFFOEM4bGZrYkl2T280K3JxMVAxVHdvWWZCTXQ1dmVVNVRBTXpqaDVIaUtnclJYc2FacGt2ZnlTQ25CeHpWdHdlby8xWWUKdzY4RG9hRW5VZVlkMGJPRlQvM0IzWnRhK0E3bnMweGxtL1AvQndhcXd5dUYwQTNZL1ZYV0FYV3Nrc3ZuWnF1VFVrSGtMdAo5Qko0aFR2SGZQR0I4R3Zzb0JxYzlLSjFvdk1nbWdCL3h4cngrRlVEK2w2RjFBYy9nbkowa1BaUk5iMGFtaU96b0dNbzVuCk9GVW9yWmowcGdTSVR3eXdDMUlVWFJSelBPN043bUY5Sm9ocmtvQjZySng1YlR4OUttVHY4dGxxNEdDQVZkWWpjUytpMG8KUk10S0R2QUpVQUVCbUliNnhFYkVvZk5IR2xwSnBJMmMrcHRKdGJhVTVUNitBVWNJWUNBckVYbWtSd2lEYjN0NVArTFFqRwpLeE5QYkJNa2NFeDJkcWVRT2ZOT3lKRnBPUnI4c0JGOEhNL3Z6cmdCajZDUEtEcDNWYkE4UU05WDNmWFptZnRjY3ZOR0F5Ck94RkczUTFBUzN6bE1hSG5Nb0lycHJEMVN5eE9qMzhTaVFqWUdtU2xERFVWcVNqN25Wd3B3RUVQaGduUGhDTEZpd2hSUXAKanNVeUNPSEl2WlJGLzRLL2VpWHdNQUFBQURBUUFCQUFBQ0FCamo5ZHpiZTFOeXhEZ0lnR2hnZ2s3QUsxRmFjOUpxL3RLRgpmN0lBdHpSOTBsbzNydnltOHVFR1hYdU5pUFI5a29VY3lCWUZuazYvTWMzZDZONXRySjlDM2JBdVZ5Tld6aDE5bzRvMGVCCkc4UnRNZGxFMDR3aUlIT0pBUWdINU5uQlBSaE01bnVRa3pxRlpHaWtuS0JibWk2clVNdHlaSlYydW01SExnLzNJSTJ6QXQKRTBvMkwzb0JJVlJvVk1yRzdyQjB0VW45U2I3TlJXWXpRNGZmRGREaVhDTVJOek52UFc4UHFJdVpxUXBEdnIwSllzUjJmaAp0c3hwYmZFYTFZbk1KVE9OOGFPSktXb21yd1BLa1hhbmJQUWlaejkwdlVPbGVqOVAzc2xqNXE5ZHgvRzFxMFZOZG9pdzZCCkZaanVlQWlNZ3d5clV6SnRKVVF1b3JzdmlIQ3VvQ3V3M2VSTjIyZ09YOVFDTlhLZDgvQStDUDNCcGoxUW9QTHZkMndQckcKWlAxUDIvWC82cmh0VndDeHI3Z25yV204TFpjN1MvNk42cEQ3M0pXTDh1MGRNbjY3NDB6WXA0alRLU3FmbS9DVXBZSlhnYgo2NnJEaDRYcTlHbUhPRENycUovbWVKVGhqU2E3WHFYWDdNeS90WUhUZmI2TWczZGdTUGg5b3VDTExJaWMwMmdMc0JYOWhxCm0wVlJaZ3FReHE4WG4yMkxOZWpTaEo2NlVCbmZFMTFnaVZvZmFWcWNmeFFsQkNlb25vY0JSNlZuTFdmUzYzZTVIcnRLOU0KM01SeUpVNlExMVpLMnlER2hSREdIdVhudUx6TWFPbjdXSk41MlNFb3MvNTROUEhqQmEvZGNXMkwvZUFrd0J5T0QySU9CaApSZThVd2c2OElMWE12eWI5aXBBQUFCQUJzOXZLVDRFT2lUcTV1NzYxY0N2cEY4b3B1OW00dEZVUnQ2YVVZcXRHc0Zia2ZrCldNV2oxSGZOaUZuVWZmZ2pOUTRoTHR4akEweC93d0VKd3YrKzJ3SWpIV0o4dzZTL2RQNTBNcFJRTlVtc2lUUGl4QjhnUG8KZk1DTFhiNEtpTUl5R0xZZkFrQmlhVURmNHNUTzVCUkEvbTk4NnI3dXR5NHNEVHhRbEtJT3djdk5CVStBeEltN1pMQmE3QwovRWhLUXhGOTMyRE9BT3diYmg4WFNOYkVrelIvOFVIK2RmbUpVREgrcmZrQlRuQ2pmZ3ZnK3hKOG9waTZUODRkWnpMN2RGCldnYjd4cm1MbUQ2amdaR3JpUy95Zk9ybUYvRTZGY000Y01IMkxWa0NwSVIreGlaSXdERFlUTFdXWmJyRHlkOTJ4eVR4QlcKdE84YnQ0V3N4TGhMRE5nQUFBRUJBTSt5NmlvUWVEOENmSTdzOGpxWW9Gc2QwMU02N3pJSWFsdjN4aXBoSWRJVHpNbDhTbwppcGoyY1B1TW1wZ1hHTWRjRnl3M2x5dnUzQUZRUEZ2RU1kVkFpK3VuRlZERTRWWVRPL0p0RHR2MGN4cWNqaHlpc2lzTGlQCm4vaW9ldDhEZ0NOU1JTd0VYUEY5NGQwWVFSQlVpOVZteGgxbktlMndlOXAzU2FQUEpZRVBySEJWd012MUtzOXc5ZU1YV2QKZkE2dVpRUk1XbCtHYTF3dy9ZdVVkRzZJTE9GelBWYktuQ3lWaEZiRHBQUkl6Z3RGelBubkhJTlNFZWNNZ1NuUUVjNFpTUwpYTDlyNElLeWw1OHg1bWxmeXhQNXBsSzlZSkJ1NGdscVZ6OG5Qb29BZFVXOHZnelNseEJJMEJQN2ZDeDl1OVd1c1orU3h1Ckk3OVdRVUZLTWw0OWNBQUFFQkFPdDE4UGR0MVA5Q2RmNGhPRklqdWJuWUlRV1lOeXlhbU4xSUZSY2FHNHBCU1BMaDRoVEwKMjVRRC84QS9mVGExcHh5NENYWUsrd0hQWHdoeVhsSGN0QlhOUjlsVXJLZXdPcyt6T1ZtM0FidlZab2l0UGp2b05aNG1CNQo2L2tzVDNEMElUMlRGZ015TWZDV1dkNXROWEhrckRLcVNEMXhKS1FRbkMvTHRoQ3V3dTJCUXBmdzUxWmdZZGRtdVNRb01DCldqMjExV0FaMlNsQzIySEplL0szRW1IRDdBWFBPZmhWYzBITFRWaElVenBaNHZxb3dvUG8rWW5ZZXJSUkRlNjBSVzlWUXAKY0sxaFByblZOWWdtVW5lUUJNWVlKRG8xSXJiNzh4M004cGw0NGVyaUVyNVMzdTlLRGN4YXJUK09oNno5ZUlnbUpER3RYSApUOG93VWp2ZytMVUFBQUEwWldNeUxYVnpaWEpBYVhBdE1UY3lMVE14TFRFdE1UTTFMbUZ3TFhOdmRYUm9MVEV1WTI5dGNIClYwWlM1cGJuUmxjbTVoYkFFQ0F3UUZCZ2M9Ci0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo='
          
      
          
          
    